#!/bin/bash

SRC_DIR=$1
if [[ -z $SRC_DIR ]]; then
	SRC_DIR=../../fillit
fi

DARKGRAY='\033[1;30m'
RED='\033[0;31m'    
LIGHTRED='\033[1;31m'
GREEN='\033[0;32m'    
YELLOW='\033[1;33m'
BLUE='\033[0;34m'    
PURPLE='\033[0;35m'    
LIGHTPURPLE='\033[1;35m'
CYAN='\033[0;36m'    
WHITE='\033[1;37m'
RESET='\033[0m'

EXE=$SRC_DIR/fillit
ACTUAL=actual.log

print_ok() {
	printf "${GREEN}OK${RESET}\n"
}

print_fail() {
	printf "${RED}FAIL${RESET}\n"
}

should_print_error() {
	should_be_the_same $1 error
}

should_be_correct() {
	should_be_the_same $1 "$1.correct"
}

should_be_the_same() {
	$EXE $1 > $ACTUAL
	printf "${RED}"
	diff $2 $ACTUAL && print_ok
	printf "${RESET}"
	rm $ACTUAL
}

should_be_the_same_with_time() {
	time $EXE $1 > $ACTUAL
	printf "${RED}"
	diff "$1.correct" $ACTUAL && print_ok
	printf "${RESET}"
	rm $ACTUAL
}
make -s -C $SRC_DIR

printf "${CYAN}===EVAL====FORM=====${RESET}\n"

printf "NORM: "
norminette $SRC_DIR > /dev/null && print_ok || print_fail

printf "print error with invalid piece: "
should_print_error sandbox/eval_form_incorrect_1.txt

printf "print error with incorrect format file: "
should_print_error sandbox/eval_form_incorrect_2.txt

printf "print error when there are 27 tetriminos: "
should_print_error sandbox/27_pieces.txt

printf "easy fillit: "
should_be_correct sandbox/test-easy.fillit

printf "baby speed test: "
should_be_the_same_with_time sandbox/test1

printf "challenge speed test: "
should_be_the_same_with_time sandbox/test7

printf "${CYAN}===MY====TEST=======${RESET}\n"

printf "print error when file does not exist: "
should_print_error sandbox/42.txt

printf "print error when file is empty: "
should_print_error sandbox/empty.txt

printf "print error when line length > 4: "
should_print_error sandbox/too_wide.txt

printf "print error when line length < 4: "
should_print_error sandbox/too_narrow.txt

printf "print error when more than 4 lines: "
should_print_error sandbox/too_high.txt

printf "print error when less than 4 lines: "
should_print_error sandbox/too_short.txt

printf "print error when there is no newline separating 4x4 square: "
should_print_error sandbox/no_nl_separator.txt

printf "print error when there are too many newlines separating 4x4 square: "
should_print_error sandbox/too_many_nl.txt

printf "print error when there are more than 4 blocks: "
should_print_error sandbox/more_than_4_blocks.txt

printf "print error when there are less than 4 blocks: "
should_print_error sandbox/less_than_4_blocks.txt

printf "print error when there is no blocks"
should_print_error sandbox/no_blocks.txt

printf "print error when there is an invalid char: "
should_print_error sandbox/invalid_char.txt

printf "print error when blocks are not stick together (1): "
should_print_error sandbox/blocks_not_stick_together_1.txt

printf "print error when blocks are not stick together (2): "
should_print_error sandbox/blocks_not_stick_together_2.txt

printf "1 Tetrimino (1): "
should_be_correct sandbox/one_tetrimino.txt

printf "1 Tetrimino (2): "
should_be_correct sandbox/one_tetrimino_2.txt

printf "2 Tetriminos (1): "
should_be_correct sandbox/two_tetriminos.txt

printf "2 Tetrimino (2): "
should_be_correct sandbox/two_tetriminos_2.txt

printf "4 Tetriminos: "
should_be_correct sandbox/four_tetriminos.txt

printf "6 Tetriminos: "
should_be_correct sandbox/6_pieces.txt

printf "7 Tetriminos: "
should_be_correct sandbox/seven_tetriminos.txt

printf "8 Tetriminos: "
should_be_correct sandbox/eight_tetriminos.txt

printf "9 Tetriminos: "
should_be_correct sandbox/nine_tetriminos.txt

printf "X tetriminos: "
should_be_the_same_with_time sandbox/x_tetriminos.txt

printf "26 Tetriminos: "
should_be_the_same_with_time sandbox/max.txt
