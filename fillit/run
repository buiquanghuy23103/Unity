#!/bin/bash

SRC_DIR=$1
if [[ -z $SRC_DIR ]]; then
	echo "usage: ./run path_to_fillit"
	exit 1;
fi

RED='\033[0;31m'    
GREEN='\033[0;32m'    
CYAN='\033[0;36m'    
RESET='\033[0m'

EXE=$SRC_DIR/fillit
REPORT=report.log
OUTPUT=output.log

print_ok() {
	printf "${GREEN}OK${RESET}\n"
}

print_fail() {
	printf "${RED}FAIL${RESET}\n"
}

should_print_error() {
	should_be_the_same $1 error
}

should_be_correct() {
	should_be_the_same $1 "$1.correct"
}

should_be_the_same() {
	leaks -q -atExit -- $EXE $1 > $REPORT 2> /dev/null
	if [[ $? == 1 ]]; then
		printf "${RED}leaks${RESET} ";
	fi
	sed -n '/leaks Report Version: /q;p' $REPORT > $OUTPUT
	printf "${RED}"
	diff $2 $OUTPUT && print_ok
	printf "${RESET}"
	rm $REPORT $OUTPUT
}

should_be_the_same_with_time() {
	time $EXE $1 > $OUTPUT
	printf "${RED}"
	diff "$1.correct" $OUTPUT && print_ok
	printf "${RESET}"
	rm $OUTPUT
}

make -s -C $SRC_DIR

printf "${CYAN}===EVAL====FORM=====${RESET}\n"

printf "NORM: "
norminette $SRC_DIR > /dev/null && print_ok || print_fail

printf "print error with invalid piece: "
should_print_error sandbox/eval_form_incorrect_1.txt

printf "print error with incorrect format file: "
should_print_error sandbox/eval_form_incorrect_2.txt

printf "there are 27 tetriminos: "
should_print_error sandbox/27_pieces.txt

printf "easy fillit: "
should_be_correct sandbox/test-easy.fillit

printf "baby speed test: "
should_be_the_same_with_time sandbox/test1

printf "challenge speed test: "
should_be_the_same_with_time sandbox/test7

printf "${CYAN}===ERROR=MANAGEMENT===${RESET}\n"

printf "file not exist: "
should_print_error sandbox/42.txt

printf "file empty: "
should_print_error sandbox/empty.txt

printf "line length > 4: "
should_print_error sandbox/too_wide.txt

printf "line length < 4: "
should_print_error sandbox/too_narrow.txt

printf "more than 4 lines: "
should_print_error sandbox/too_high.txt

printf "less than 4 lines: "
should_print_error sandbox/too_short.txt

printf "no newline separating 4x4 square: "
should_print_error sandbox/no_nl_separator.txt

printf "too many newlines separating 4x4 square: "
should_print_error sandbox/too_many_nl.txt

printf "more than 4 blocks: "
should_print_error sandbox/more_than_4_blocks.txt

printf "less than 4 blocks: "
should_print_error sandbox/less_than_4_blocks.txt

printf "no blocks: "
should_print_error sandbox/no_blocks.txt

printf "invalid char: "
should_print_error sandbox/invalid_char.txt

printf "blocks are not stick together (1): "
should_print_error sandbox/blocks_not_stick_together_1.txt

printf "blocks are not stick together (2): "
should_print_error sandbox/blocks_not_stick_together_2.txt

printf "${CYAN}===FUNCTIONAL==TEST=====${RESET}\n"

printf "test 2: "
should_be_correct sandbox/test2

printf "test 3: "
should_be_correct sandbox/test3

printf "test 4: "
should_be_correct sandbox/test4

printf "test 5: "
should_be_correct sandbox/test5

printf "test 6: "
should_be_correct sandbox/test6

printf "test 8: "
should_be_correct sandbox/test8

printf "test 9: "
should_be_correct sandbox/test9

printf "test 10: "
should_be_correct sandbox/test10

printf "test 11: "
should_be_correct sandbox/test11

printf "test 12: "
should_be_correct sandbox/test12

printf "test 16: "
should_be_correct sandbox/test16

printf "test 18: "
should_be_correct sandbox/test18

printf "test 19: "
should_be_correct sandbox/test19

printf "${CYAN}===MILLON==CHECKER=====${RESET}\n"
cd millon_checker
./fillit_checker.zsh -v $SRC_DIR etalon_fillit 1 12
cd ..

printf "${RESET}"
read -p "Do you want to run performance testing? [Yes/no]" PERF
if [[ $PERF != "Yes"  ]]; then
	exit 0;
fi

printf "test 13: "
should_be_the_same_with_time sandbox/test13

printf "test 14: "
should_be_the_same_with_time sandbox/test14

printf "test 15: "
should_be_the_same_with_time sandbox/test15
